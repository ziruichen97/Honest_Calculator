type: edu
files:
- name: honest_calc.py
  visible: true
  text: |
    # write your code here
    msg_0 = "Enter an equation"
    msg_1 = "Do you even know what numbers are? Stay focused!"
    msg_2 = "Yes ... an interesting math operation. You've slept through all classes, haven't you?"
    msg_3 = "Yeah... division by zero. Smart move..."
    msg_4 = "Do you want to store the result? (y / n):"
    msg_5 = "Do you want to continue calculations? (y / n):"
    memory = 0


    def isnumber(n):
        if "." in n:
            return n.replace(".", "", 1).isdecimal()
        return n.isdecimal()


    def ending(res):
        mem = 0
        while True:
            print(msg_4)
            ans1 = input()
            if ans1 == "y":
                mem = res
                break
            elif ans1 == "n":
                break
        while True:
            print(msg_5)
            ans2 = input()
            if ans2 == "y" or "n":
                return ans2, mem


    while True:
        print(msg_0)
        calc = input()
        a, operand, b = calc.split()

        if a == "M":
            a = str(memory)
        elif b == "M":
            b = str(memory)

        if isnumber(a) is False or isnumber(b) is False:
            print(msg_1)
        elif operand not in ["+", "-", "*", "/"]:
            print(msg_2)
        else:
            if operand == "+":
                result = float(a) + float(b)
                print(result)
                ans, memory = ending(result)
                if ans == "n":
                    break
            elif operand == "-":
                result = float(a) - float(b)
                print(result)
                ans, memory = ending(result)
                if ans == "n":
                    break
            elif operand == "*":
                result = float(a) * float(b)
                print(result)
                ans, memory = ending(result)
                if ans == "n":
                    break
            elif operand == "/":
                try:
                    result = float(a) / float(b)
                except ZeroDivisionError:
                    print(msg_3)
                else:
                    print(result)
                    ans, memory = ending(result)
                    if ans == "n":
                        break
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):",
           " ... lazy",
           " ... very lazy",
           " ... very, very lazy",
           "You are"]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [(("4 * 5.5", add_memory("22.0")), ("y", msg[5]), ("n", "")),
            (("11 * 11.1", add_memory("122.1")), ("y", msg[5]), ("n", "")),
            (("1 * 5", "\n".join([msg[9] + msg[6] + msg[7], add_memory("5.0")])), ("y", msg[5]), ("y", msg[0]),
             ("0 + M", "\n".join([msg[9] + msg[6] + msg[8], add_memory("5.0")])), ("y", msg[5]), ("n", "")),
            (("2 / M", "\n".join([msg[9] + msg[6], add_enter(msg[3])])), ("1 * M", "\n".join([msg[9] + "".join(msg[6:9]), add_memory("0.0")])), ("n", msg[5]), ("y", msg[0]),
             ("899 * 0", "\n".join([msg[9] + msg[8], add_memory("0.0")])), ("n", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected:\n{item[1]}\nFound:\n{output.strip()}")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")
            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import HonestCalc

    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15813#comment
status: Solved
record: 3
